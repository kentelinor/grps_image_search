version: '3.9'

services:
  server:
    build:
      context: .                    # Project root
      dockerfile: server/Dockerfile  # Path to server Dockerfile
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - SEARCH_ENGINE_ID=${SEARCH_ENGINE_ID}
    ports:
      - "50051:50051"
    networks:
      - grpc-network
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr", "localhost:50051"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  client:
    build:
      context: .                    # Project root
      dockerfile: client/Dockerfile  # Path to client Dockerfile
    depends_on:
      - server
    stdin_open: true                # Keep stdin open for interactive input
    tty: true                       # Allocate a pseudo-TTY
    networks:
      - grpc-network

  proxy:
    build:
      context: .  # Project root
      dockerfile: proxy/Dockerfile
    environment:
      - PYTHONPATH=/app:/app/generated:/app/client:/app/server  # Add /app/generated to PYTHONPATH
    ports:
      - "8080:8080"
    depends_on:
      - server
    networks:
      - grpc-network

  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:80"
    networks:
      - grpc-network

  tests:
    build:
      context: . 
      dockerfile: tests/Dockerfile
    depends_on:
      - server  # Ensure the server is up before running tests
    networks:
      - grpc-network
    environment:
      - ENV_FILE=.env
    entrypoint: ["python", "-m", "unittest", "discover", "-s", "tests"]
    # or use entrypoint: ["pytest", "tests/"] if using pytest

networks:
  grpc-network:
    driver: bridge
